import React, { useState, useEffect } from 'react';

// Ensure Tailwind CSS is loaded. In a real React project, you'd configure it.
// For this Canvas environment, we assume it's available or would be linked in index.html.

// Placeholder product data
const initialProducts = [
  {
    id: '1',
    name: 'Alimento de Expedición para Perros',
    price: 38.99,
    image: 'https://placehold.co/400x300/6B8E23/FFFFFF?text=Alimento+Expedición', // Earthy green for adventure
    description: 'Nutrición completa para perros activos y aventureros. Con ingredientes naturales para energía y vitalidad.',
    category: 'Alimentos',
    stock: 50,
  },
  {
    id: '2',
    name: 'Rascador "Pico Salvaje" para Gatos',
    price: 15.00,
    image: 'https://placehold.co/400x300/8B4513/FFFFFF?text=Rascador+Gato', // Brown for nature
    description: 'Rascador robusto con múltiples niveles y texturas para satisfacer el instinto de tu gato. ¡Ideal para pequeños exploradores!',
    category: 'Juguetes',
    stock: 30,
  },
  {
    id: '3',
    name: 'Spray Protector "Escudo Natural"',
    price: 22.00,
    image: 'https://placehold.co/400x300/228B22/FFFFFF?text=Spray+Protector', // Forest green
    description: 'Protección natural contra insectos y elementos para tus mascotas en sus aventuras al aire libre. Hipoalergénico.',
    category: 'Higiene',
    stock: 40,
  },
  {
    id: '4',
    name: 'Mochila de Aventura para Perros',
    price: 65.00,
    image: 'https://placehold.co/400x300/D2B48C/8B4513?text=Mochila+Perro', // Tan/brown for gear
    description: 'Mochila ergonómica y resistente para que tu perro lleve sus propias provisiones en caminatas y excursiones. Con arnés ajustable.',
    category: 'Accesorios',
    stock: 15,
  },
  {
    id: '5',
    name: 'Premios Energéticos "Sendero Feliz"',
    price: 9.50,
    image: 'https://placehold.co/400x300/FFD700/8B4513?text=Premios+Energía', // Golden for energy
    description: 'Premios nutritivos y deliciosos para recargar energías durante largas jornadas de juego y exploración.',
    category: 'Alimentos',
    stock: 60,
  },
];

// Product Card Component
const ProductCard = ({ product, onAddToCart, onViewDetails }) => (
  <div className="bg-white rounded-xl shadow-lg overflow-hidden transform transition-transform hover:scale-105 duration-300 flex flex-col h-full">
    <img
      src={product.image}
      alt={product.name}
      className="w-full h-48 object-cover object-center"
      onError={(e) => { e.target.onerror = null; e.target.src = 'https://placehold.co/400x300/A0A0A0/FFFFFF?text=Imagen+No+Disponible'; }}
    />
    <div className="p-4 flex flex-col flex-grow">
      <h3 className="text-xl font-semibold text-gray-800 mb-2">{product.name}</h3>
      <p className="text-gray-600 text-sm flex-grow">{product.description.substring(0, 70)}...</p>
      <div className="flex items-center justify-between mt-4">
        <span className="text-2xl font-bold text-green-700">${product.price.toFixed(2)}</span> {/* Updated color */}
        <div className="flex space-x-2">
          <button
            onClick={() => onViewDetails(product)}
            className="px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-lg hover:bg-blue-700 transition duration-200 shadow-md"
          >
            Ver Detalles
          </button>
          <button
            onClick={() => onAddToCart(product)}
            className="px-4 py-2 bg-orange-600 text-white text-sm font-medium rounded-lg hover:bg-orange-700 transition duration-200 shadow-md"
          >
            Añadir al Carrito
          </button>
        </div>
      </div>
    </div>
  </div>
);

// Product List Component
const ProductList = ({ products, onAddToCart, onViewDetails }) => (
  <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6 p-6">
    {products.map((product) => (
      <ProductCard
        key={product.id}
        product={product}
        onAddToCart={onAddToCart}
        onViewDetails={onViewDetails}
      />
    ))}
  </div>
);

// Product Detail Component
const ProductDetail = ({ product, onAddToCart, onBack }) => (
  <div className="container mx-auto p-6 bg-white rounded-xl shadow-lg my-8 max-w-4xl">
    <button
      onClick={onBack}
      className="mb-6 px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 transition duration-200 flex items-center"
    >
      <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path></svg>
      Volver a Productos
    </button>
    <div className="flex flex-col md:flex-row gap-8">
      <div className="md:w-1/2">
        <img
          src={product.image}
          alt={product.name}
          className="w-full h-auto rounded-lg shadow-md"
          onError={(e) => { e.target.onerror = null; e.target.src = 'https://placehold.co/600x450/A0A0A0/FFFFFF?text=Imagen+No+Disponible'; }}
        />
      </div>
      <div className="md:w-1/2 flex flex-col justify-between">
        <div>
          <h2 className="text-4xl font-extrabold text-gray-900 mb-4">{product.name}</h2>
          <p className="text-gray-700 text-lg mb-6">{product.description}</p>
          <p className="text-gray-600 text-base mb-2">Categoría: <span className="font-semibold">{product.category}</span></p>
          <p className="text-gray-600 text-base mb-6">Stock Disponible: <span className="font-semibold">{product.stock}</span></p>
        </div>
        <div className="flex items-center justify-between mt-auto pt-4 border-t border-gray-200">
          <span className="text-4xl font-bold text-green-700">${product.price.toFixed(2)}</span> {/* Updated color */}
          <button
            onClick={() => onAddToCart(product)}
            className="px-8 py-3 bg-orange-600 text-white text-lg font-bold rounded-lg hover:bg-orange-700 transition duration-200 shadow-lg"
          >
            Añadir al Carrito
          </button>
        </div>
      </div>
    </div>
  </div>
);

// Cart Component
const Cart = ({ cartItems, onUpdateQuantity, onRemoveItem, onCheckout, onBack }) => {
  const total = cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0);

  return (
    <div className="container mx-auto p-6 bg-white rounded-xl shadow-lg my-8 max-w-3xl">
      <button
        onClick={onBack}
        className="mb-6 px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 transition duration-200 flex items-center"
      >
        <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path></svg>
        Seguir Comprando
      </button>
      <h2 className="text-3xl font-bold text-gray-900 mb-6">Tu Carrito de Expedición</h2> {/* Updated text */}
      {cartItems.length === 0 ? (
        <p className="text-gray-600 text-lg">Tu carrito está vacío. ¡Añade algunos artículos para tu próxima aventura!</p> 
      ) : (
        <>
          <div className="space-y-4">
            {cartItems.map((item) => (
              <div key={item.id} className="flex items-center justify-between bg-gray-50 p-4 rounded-lg shadow-sm">
                <div className="flex items-center">
                  <img src={item.image} alt={item.name} className="w-16 h-16 object-cover rounded-md mr-4" />
                  <div>
                    <h3 className="text-lg font-semibold text-gray-800">{item.name}</h3>
                    <p className="text-gray-600">${item.price.toFixed(2)} c/u</p>
                  </div>
                </div>
                <div className="flex items-center space-x-4">
                  <div className="flex items-center border rounded-lg">
                    <button
                      onClick={() => onUpdateQuantity(item.id, item.quantity - 1)}
                      disabled={item.quantity <= 1}
                      className="px-3 py-1 bg-gray-200 rounded-l-lg hover:bg-gray-300 disabled:opacity-50"
                    >
                      -
                    </button>
                    <span className="px-3">{item.quantity}</span>
                    <button
                      onClick={() => onUpdateQuantity(item.id, item.quantity + 1)}
                      className="px-3 py-1 bg-gray-200 rounded-r-lg hover:bg-gray-300"
                    >
                      +
                    </button>
                  </div>
                  <button
                    onClick={() => onRemoveItem(item.id)}
                    className="text-red-500 hover:text-red-700"
                  >
                    <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path></svg>
                  </button>
                </div>
              </div>
            ))}
          </div>
          <div className="mt-8 flex justify-between items-center border-t pt-6 border-gray-200">
            <span className="text-2xl font-bold text-gray-900">Total: ${total.toFixed(2)}</span>
            <button
              onClick={onCheckout}
              className="px-8 py-3 bg-green-700 text-white text-lg font-bold rounded-lg hover:bg-green-800 transition duration-200 shadow-lg"
            >
              Proceder al Pago
            </button>
          </div>
        </>
      )}
    </div>
  );
};

// Checkout Component (Simulated)
const Checkout = ({ onConfirmPurchase, onBackToCart }) => {
  const [paymentStatus, setPaymentStatus] = useState('pending'); // 'pending', 'processing', 'success', 'failed'

  const handlePayment = () => {
    setPaymentStatus('processing');
    // Simulate API call
    setTimeout(() => {
      const success = Math.random() > 0.2; // 80% success rate
      if (success) {
        setPaymentStatus('success');
        onConfirmPurchase(); // Clear cart and go to home
      } else {
        setPaymentStatus('failed');
      }
    }, 2000);
  };

  return (
    <div className="container mx-auto p-6 bg-white rounded-xl shadow-lg my-8 max-w-2xl text-center">
      <h2 className="text-3xl font-bold text-gray-900 mb-6">Confirmar Expedición</h2> {/* Updated text */}
      {paymentStatus === 'pending' && (
        <>
          <p className="text-gray-700 text-lg mb-8">
            Estás a punto de completar tu compra. Por favor, revisa tus productos en el carrito antes de proceder.
          </p>
          <button
            onClick={handlePayment}
            className="px-8 py-3 bg-orange-600 text-white text-lg font-bold rounded-lg hover:bg-orange-700 transition duration-200 shadow-lg mr-4"
          >
            Pagar Ahora (Simulado)
          </button>
          <button
            onClick={onBackToCart}
            className="px-6 py-3 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 transition duration-200"
          >
            Volver al Carrito
          </button>
        </>
      )}
      {paymentStatus === 'processing' && (
        <div className="flex flex-col items-center">
          <div className="animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-orange-500 mb-4"></div> {/* Updated color */}
          <p className="text-orange-600 text-xl font-semibold">Preparando tu expedición...</p> {/* Updated text */}
        </div>
      )}
      {paymentStatus === 'success' && (
        <div className="text-green-700"> {/* Updated color */}
          <svg className="w-20 h-20 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>
          <p className="text-3xl font-bold mb-4">¡Expedición Confirmada!</p> {/* Updated text */}
          <p className="text-lg">Gracias por tu compra. ¡Tus patitas salvajes estarán felices!</p> {/* Updated text */}
          <button
            onClick={() => window.location.reload()} // Simple reload to reset app state
            className="mt-6 px-6 py-3 bg-orange-600 text-white text-lg font-bold rounded-lg hover:bg-orange-700 transition duration-200 shadow-lg"
          >
            Volver al Campamento Base
          </button>
        </div>
      )}
      {paymentStatus === 'failed' && (
        <div className="text-red-600">
          <svg className="w-20 h-20 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>
          <p className="text-3xl font-bold mb-4">¡Expedición Fallida!</p> {/* Updated text */}
          <p className="text-lg">Hubo un problema con tu pago. Por favor, inténtalo de nuevo o contacta con el guía.</p> {/* Updated text */}
          <button
            onClick={() => setPaymentStatus('pending')}
            className="mt-6 px-6 py-3 bg-red-600 text-white text-lg font-bold rounded-lg hover:bg-red-700 transition duration-200 shadow-lg mr-4"
          >
            Reintentar Expedición
          </button>
          <button
            onClick={onBackToCart}
            className="mt-6 px-6 py-3 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 transition duration-200"
          >
            Volver al Carrito
          </button>
        </div>
      )}
    </div>
  );
};

// Product Recommender Component using Gemini API
const ProductRecommender = ({ products }) => {
  const [petType, setPetType] = useState('');
  const [recommendations, setRecommendations] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const getRecommendations = async () => {
    if (!petType.trim()) {
      setError('Por favor, ingresa el tipo de mascota (ej. perro, gato, etc.).');
      return;
    }

    setLoading(true);
    setError('');
    setRecommendations('');

    const productNames = products.map(p => p.name).join(', ');
    const prompt = `Basado en los siguientes productos disponibles: ${productNames}. Recomienda 3 productos para un ${petType} y explica brevemente por qué. Si no encuentras un producto específico, puedes sugerir una categoría general. Responde en español.`;

    let chatHistory = [];
    chatHistory.push({ role: "user", parts: [{ text: prompt }] });
    const payload = { contents: chatHistory };
    const apiKey = ""; // If you want to use models other than gemini-2.5-flash-preview-05-20 or imagen-3.0-generate-002, provide an API key here. Otherwise, leave this as-is.
    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;

    try {
      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.json();
      if (result.candidates && result.candidates.length > 0 &&
          result.candidates[0].content && result.candidates[0].content.parts &&
          result.candidates[0].content.parts.length > 0) {
        setRecommendations(result.candidates[0].content.parts[0].text);
      } else {
        setError('No se pudieron obtener recomendaciones. Inténtalo de nuevo.');
      }
    } catch (e) {
      console.error("Error fetching recommendations:", e);
      setError(`Error al conectar con la IA: ${e.message}.`);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="bg-white rounded-xl shadow-lg p-6 mt-8 max-w-2xl mx-auto">
      <h3 className="text-2xl font-bold text-gray-900 mb-4 text-center">Recomendador de Productos ✨</h3>
      <p className="text-gray-700 mb-4 text-center">
        Ingresa el tipo de mascota para obtener sugerencias de productos personalizadas.
      </p>
      <div className="flex flex-col sm:flex-row gap-4 mb-4">
        <input
          type="text"
          value={petType}
          onChange={(e) => setPetType(e.target.value)}
          placeholder="Ej: perro, gato, hámster"
          className="flex-grow p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500"
        />
        <button
          onClick={getRecommendations}
          disabled={loading}
          className="px-6 py-3 bg-orange-600 text-white font-bold rounded-lg hover:bg-orange-700 transition duration-200 shadow-md disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center"
        >
          {loading ? (
            <svg className="animate-spin h-5 w-5 text-white mr-3" viewBox="0 0 24 24">
              <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
              <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
          ) : (
            'Obtener Recomendaciones ✨'
          )}
        </button>
      </div>

      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-lg relative mt-4" role="alert">
          <strong className="font-bold">¡Error!</strong>
          <span className="block sm:inline"> {error}</span>
        </div>
      )}

      {recommendations && (
        <div className="bg-green-50 border border-green-200 text-green-800 p-4 rounded-lg mt-4">
          <h4 className="text-lg font-semibold mb-2">Sugerencias para tu {petType}:</h4>
          <p className="whitespace-pre-wrap">{recommendations}</p>
          <p className="text-sm text-gray-600 mt-4">
            <strong className="font-bold">Descargo de responsabilidad:</strong> Estas recomendaciones son generadas por IA y son solo sugerencias. Consulta siempre a un veterinario para necesidades específicas de tu mascota.
          </p>
        </div>
      )}
    </div>
  );
};


// Main App Component
export default function App() {
  const [view, setView] = useState('home'); // 'home', 'productDetail', 'cart', 'checkout'
  const [selectedProduct, setSelectedProduct] = useState(null);
  const [cartItems, setCartItems] = useState([]);

  const handleAddToCart = (product) => {
    setCartItems((prevItems) => {
      const existingItem = prevItems.find((item) => item.id === product.id);
      if (existingItem) {
        return prevItems.map((item) =>
          item.id === product.id ? { ...item, quantity: item.quantity + 1 } : item
        );
      } else {
        return [...prevItems, { ...product, quantity: 1 }];
      }
    });
    // Optional: show a confirmation message or redirect to cart
    // alert(`${product.name} añadido al carrito!`); // Avoid alert(), use custom modal
  };

  const handleUpdateQuantity = (productId, newQuantity) => {
    if (newQuantity <= 0) {
      handleRemoveItem(productId);
      return;
    }
    setCartItems((prevItems) =>
      prevItems.map((item) =>
        item.id === productId ? { ...item, quantity: newQuantity } : item
      )
    );
  };

  const handleRemoveItem = (productId) => {
    setCartItems((prevItems) => prevItems.filter((item) => item.id !== productId));
  };

  const handleViewDetails = (product) => {
    setSelectedProduct(product);
    setView('productDetail');
  };

  const handleConfirmPurchase = () => {
    setCartItems([]); // Clear the cart
    setView('home'); // Go back to home
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 to-orange-100 font-sans text-gray-900"> {/* Updated gradient */}
      {/* Header */}
      <header className="bg-green-800 text-white p-4 shadow-md"> {/* Updated header color */}
        <div className="container mx-auto flex justify-between items-center">
          <h1 className="text-3xl font-extrabold cursor-pointer" onClick={() => setView('home')}>
            Patitas Salvajes
          </h1>
          <nav className="flex items-center space-x-6">
            <button
              onClick={() => setView('home')}
              className="text-lg font-medium hover:text-green-200 transition duration-200"
            >
              Productos
            </button>
            <button
              onClick={() => setView('cart')}
              className="relative text-lg font-medium hover:text-green-200 transition duration-200"
            >
              <svg className="w-7 h-7 inline-block mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z"></path></svg>
              Carrito
              {cartItems.length > 0 && (
                <span className="absolute -top-2 -right-2 bg-red-500 text-white text-xs font-bold rounded-full h-5 w-5 flex items-center justify-center">
                  {cartItems.length}
                </span>
              )}
            </button>
          </nav>
        </div>
      </header>

      {/* Main Content Area */}
      <main className="container mx-auto py-8">
        {view === 'home' && (
          <>
            <h2 className="text-4xl font-extrabold text-center text-gray-800 mb-10">¡Equipa a tus Patitas para la Aventura!</h2> {/* Updated text */}
            <ProductList
              products={initialProducts}
              onAddToCart={handleAddToCart}
              onViewDetails={handleViewDetails}
            />
            {/* New Product Recommender Component */}
            <ProductRecommender products={initialProducts} />
          </>
        )}

        {view === 'productDetail' && selectedProduct && (
          <ProductDetail
            product={selectedProduct}
            onAddToCart={handleAddToCart}
            onBack={() => setView('home')}
          />
        )}

        {view === 'cart' && (
          <Cart
            cartItems={cartItems}
            onUpdateQuantity={handleUpdateQuantity}
            onRemoveItem={handleRemoveItem}
            onCheckout={() => setView('checkout')}
            onBack={() => setView('home')}
          />
        )}

        {view === 'checkout' && (
          <Checkout
            onConfirmPurchase={handleConfirmPurchase}
            onBackToCart={() => setView('cart')}
          />
        )}
      </main>

      {/* Footer */}
      <footer className="bg-gray-800 text-white p-6 mt-12">
        <div className="container mx-auto text-center text-sm">
          <p>&copy; {new Date().getFullYear()} Patitas Salvajes. Todos los derechos reservados.</p> {/* Updated text */}
          <p className="mt-2">Contacto: info@patitassalvajes.com | Tel: +123 456 7890</p>
        </div>
      </footer>
    </div>
  );
}
